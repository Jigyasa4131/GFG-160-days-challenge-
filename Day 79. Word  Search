class Solution {
    static public boolean isWordExist(char[][] mat, String word) {
        // Code here
        int n = mat.length;
        int m = mat[0].length;
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(mat[i][j] == word.charAt(0)){
                    boolean[][] visited = new boolean[n][m];
                    if(dfs(mat,word, 0, i, j, visited)){
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
    
    private static boolean dfs(char[][] board, String word, int idx, int i , int j, boolean[][] visited){
        if(idx == word.length()) {
            return true;
        }
        
        if( i < 0 || j < 0 || i >= board.length || j >= board[0].length || visited [i][j] || board[i][j] != word.charAt(idx)) {
            return false;
        }
        
        visited[i][j] = true;
        
        boolean found = dfs(board, word, idx + 1, i + 1, j, visited) || 
                        dfs(board, word, idx + 1, i - 1, j, visited) || 
                        dfs(board, word, idx + 1, i, j + 1, visited) || 
                        dfs(board, word, idx + 1, i, j - 1, visited);
        
        visited[i][j] = false;
        
        return found;
    }
}




