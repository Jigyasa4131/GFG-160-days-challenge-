class Solution {
    public int orangesRotting(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        
        Queue<int[]> q = new LinkedList<>();
        int fresh = 0;
        
        // Step 1: push all initially rotten oranges to queue
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 2) {
                    q.offer(new int[]{i, j, 0});  // {row, col, time}
                } else if (mat[i][j] == 1) {
                    fresh++;
                }
            }
        }
        
        int time = 0;
        int[][] dirs = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        int rottenCount = 0;
        
        // Step 2: BFS
        while (!q.isEmpty()) {
            int[] curr = q.poll();
            int r = curr[0], c = curr[1], t = curr[2];
            time = Math.max(time, t);
            
            for (int[] d : dirs) {
                int nr = r + d[0], nc = c + d[1];
                if (nr >= 0 && nr < n && nc >= 0 && nc < m && mat[nr][nc] == 1) {
                    mat[nr][nc] = 2; // make it rotten
                    rottenCount++;
                    q.offer(new int[]{nr, nc, t + 1});
                }
            }
        }
        
        // Step 3: check if all fresh became rotten
        if (rottenCount != fresh) return -1;
        
        return time;
    }
}
