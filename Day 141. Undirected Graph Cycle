class Solution {
    public boolean isCycle(int V, int[][] edges) {
        // Build adjacency list from edge list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]); // undirected graph
        }
        
        boolean[] visited = new boolean[V];
        
        // Check each component
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfs(i, -1, visited, adj)) return true;
            }
        }
        return false;
    }
    
    private boolean dfs(int node, int parent, boolean[] visited, ArrayList<ArrayList<Integer>> adj) {
        visited[node] = true;
        
        for (int nbr : adj.get(node)) {
            if (!visited[nbr]) {
                if (dfs(nbr, node, visited, adj)) return true;
            } else if (nbr != parent) {
                return true; // found cycle
            }
        }
        return false;
    }
}
