class Solution {
    private Stack<Integer> stack;
    private Stack<Integer> minStack;

    public Solution() {
        stack = new Stack<>();
        minStack = new Stack<>();
    }

    // Add an element to the top of Stack
    public void push(int x) {
        stack.push(x);

        // If minStack is empty or x is smaller or equal, push to minStack too
        if (minStack.isEmpty() || x <= minStack.peek()) {
            minStack.push(x);
        }
    }

    // Remove the top element from the Stack
    public void pop() {
        if (stack.isEmpty()) return;

        int removed = stack.pop();

        // If popped element is the current minimum, remove from minStack too
        if (!minStack.isEmpty() && removed == minStack.peek()) {
            minStack.pop();
        }
    }

    // Returns top element of the Stack
    public int peek() {
        if (stack.isEmpty()) return -1;
        return stack.peek();
    }

    // Finds minimum element of Stack
    public int getMin() {
        if (minStack.isEmpty()) return -1;
        return minStack.peek();
    }
}
