class Solution {
    static long[][][] dp; // dp[i][j][0/1] for false/true

    static int countWays(String s) {
        int n = s.length();
        dp = new long[n][n][2];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                dp[i][j][0] = dp[i][j][1] = -1;

        return (int) solve(s, 0, n - 1, true);
    }

    static long solve(String s, int i, int j, boolean isTrue) {
        if (i > j) return 0;

        if (i == j) {
            if (isTrue) return s.charAt(i) == 'T' ? 1 : 0;
            else return s.charAt(i) == 'F' ? 1 : 0;
        }

        if (dp[i][j][isTrue ? 1 : 0] != -1)
            return dp[i][j][isTrue ? 1 : 0];

        long ways = 0;
        for (int k = i + 1; k <= j - 1; k += 2) {
            char op = s.charAt(k);

            long lt = solve(s, i, k - 1, true);
            long lf = solve(s, i, k - 1, false);
            long rt = solve(s, k + 1, j, true);
            long rf = solve(s, k + 1, j, false);

            if (op == '&') {
                if (isTrue) ways += lt * rt;
                else ways += lt * rf + lf * rt + lf * rf;
            }
            else if (op == '|') {
                if (isTrue) ways += lt * rt + lt * rf + lf * rt;
                else ways += lf * rf;
            }
            else if (op == '^') {
                if (isTrue) ways += lt * rf + lf * rt;
                else ways += lt * rt + lf * rf;
            }
        }

        return dp[i][j][isTrue ? 1 : 0] = ways;
    }
}
