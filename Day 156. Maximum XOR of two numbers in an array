class Solution {
    static class TrieNode {
        TrieNode[] child = new TrieNode[2];
    }
    
    private TrieNode root;
    
    public Solution() {
        root = new TrieNode();
    }
    
    // Insert a number into Trie
    private void insert(int num) {
        TrieNode node = root;
        for (int i = 20; i >= 0; i--) { // since max 2^20 > 1e6
            int bit = (num >> i) & 1;
            if (node.child[bit] == null) {
                node.child[bit] = new TrieNode();
            }
            node = node.child[bit];
        }
    }
    
    // Find max XOR with current number
    private int getMaxXor(int num) {
        TrieNode node = root;
        int xor = 0;
        for (int i = 20; i >= 0; i--) {
            int bit = (num >> i) & 1;
            int opposite = 1 - bit;
            if (node.child[opposite] != null) {
                xor |= (1 << i); // take opposite to maximize XOR
                node = node.child[opposite];
            } else {
                node = node.child[bit];
            }
        }
        return xor;
    }
    
    public int maxXor(int[] arr) {
        // Build trie
        for (int num : arr) {
            insert(num);
        }
        
        int max = 0;
        // Query max xor
        for (int num : arr) {
            max = Math.max(max, getMaxXor(num));
        }
        return max;
    }
}
