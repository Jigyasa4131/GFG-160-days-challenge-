class Solution {
    public boolean isCyclic(int V, int[][] edges) {
        // Build adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
        }
        
        boolean[] visited = new boolean[V];
        boolean[] inStack = new boolean[V];
        
        // Run DFS for each component
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfs(i, adj, visited, inStack)) return true;
            }
        }
        return false;
    }
    
    private boolean dfs(int node, List<List<Integer>> adj, boolean[] visited, boolean[] inStack) {
        visited[node] = true;
        inStack[node] = true;
        
        for (int nei : adj.get(node)) {
            if (!visited[nei]) {
                if (dfs(nei, adj, visited, inStack)) return true;
            } else if (inStack[nei]) {
                return true; // cycle found
            }
        }
        
        inStack[node] = false; // remove from recursion stack
        return false;
    }
}
