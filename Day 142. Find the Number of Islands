class Solution {
    // 8 possible moves (row, col)
    private static final int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};
    private static final int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};

    public int countIslands(char[][] grid) {
        int n = grid.length, m = grid[0].length;
        int count = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 'L') {
                    count++;
                    dfs(grid, i, j, n, m);
                }
            }
        }

        return count;
    }

    private void dfs(char[][] grid, int x, int y, int n, int m) {
        // Boundary + water check
        if (x < 0 || y < 0 || x >= n || y >= m || grid[x][y] == 'W')
            return;

        // Mark visited
        grid[x][y] = 'W';

        // Explore 8 directions
        for (int k = 0; k < 8; k++) {
            dfs(grid, x + dx[k], y + dy[k], n, m);
        }
    }
}
