// User function Template for Java
class Solution {
    public int[] bellmanFord(int V, int[][] edges, int src) {
        int[] dist = new int[V];
        
        // Step 1: Initialize distances
        for (int i = 0; i < V; i++) {
            dist[i] = (int)1e8;  // a large number instead of infinity
        }
        dist[src] = 0;

        // Step 2: Relax edges V-1 times
        for (int i = 0; i < V - 1; i++) {
            for (int[] edge : edges) {
                int u = edge[0];
                int v = edge[1];
                int wt = edge[2];
                
                if (dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                    dist[v] = dist[u] + wt;
                }
            }
        }

        // Step 3: Check for negative weight cycle (optional for GFG)
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];
            
            if (dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                // Negative weight cycle detected
                return new int[]{-1};
            }
        }
        
        return dist;
    }
}
