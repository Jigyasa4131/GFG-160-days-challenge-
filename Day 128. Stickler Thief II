class Solution {
    int maxValue(int[] arr) {
        int n = arr.length;
        if (n == 0) return 0;
        if (n == 1) return arr[0];
        if (n == 2) return Math.max(arr[0], arr[1]);

        // Case 1: Exclude last house
        int max1 = robLinear(arr, 0, n - 2);

        // Case 2: Exclude first house
        int max2 = robLinear(arr, 1, n - 1);

        return Math.max(max1, max2);
    }

    // Helper to solve linear version of Stickler Thief
    int robLinear(int[] arr, int start, int end) {
        int incl = arr[start]; // include first
        int excl = 0;          // exclude first

        for (int i = start + 1; i <= end; i++) {
            int newIncl = excl + arr[i];           // include current
            int newExcl = Math.max(incl, excl);    // exclude current

            incl = newIncl;
            excl = newExcl;
        }

        return Math.max(incl, excl);
    }
}

