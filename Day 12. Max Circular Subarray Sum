class Solution {

    // a: input array
    // n: size of array
    // Function to find maximum circular subarray sum.
    public int circularSubarraySum(int arr[]) {

        // Your code here
        int n = arr.length;
        int max_kadane = kadane(arr);
        int totalSum = 0;
         for(int i = 0;i< n ;i++){
             totalSum += arr[i];
             arr[i] = -arr[i];
         }
          int max_inverse_kadane = kadane(arr);
          int max_circular = totalSum + max_inverse_kadane;
          
          if(max_circular == 0){
              return max_kadane;
          }
           return Math.max(max_kadane, max_circular);
        
    }
    private int kadane(int[] arr){
        int maxSoFar = arr[0];
        int currMax = arr[0];
        for(int i= 1; i < arr.length;i++){
            currMax = Math.max(arr[i], currMax+arr[i]);
            maxSoFar = Math.max(maxSoFar, currMax);
        }
        return maxSoFar;
    }
}
