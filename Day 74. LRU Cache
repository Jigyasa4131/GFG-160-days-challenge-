class LRUCache {
    class Node {
        int key, value;
        Node prev, next;
        
        Node(int k, int v) {
            key = k;
            value = v;
        }
    }
    private final int capacity;
    private final Map<Integer, Node> map;
    private final Node head, tail;

    LRUCache(int cap) {
        // code here
        this.capacity = cap;
        this.map = new HashMap<>();
        
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head.next = tail;
        tail.prev = head;
        
    }

    public int get(int key) {
        // your code here
        if(!map.containsKey(key)) return -1;
        
        Node node = map.get(key);
        remove(node);
        insertToFront(node);
        return node.value;
    }

        
    public void put(int key, int value) {
        // your code here
        if(map.containsKey(key)) {
            Node existing = map.get(key);
            remove(existing);
        }
        if(map.size() == capacity) {
            Node lru = tail.prev;
            remove(lru);
        }
        
        Node newNode = new Node(key, value);
        insertToFront(newNode);
    }
    
    private void remove(Node node) {
        map.remove(node.key);
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    private void insertToFront(Node node) {
        map.put(node.key, node);
        node.next = head.next;
        head.next.prev = node;
        head.next = node;
        node.prev = head;
    }
}
