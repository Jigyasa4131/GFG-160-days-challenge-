/*
class Node {
    int data;
    Node left, right;

    Node(int key) {
        data = key;
        left = right = null;
    }
}
*/

class Solution {
    
    static int preIndex = 0;
    static Map<Integer, Integer> inMap;
    public static Node buildTree(int inorder[], int preorder[]) {
        // code here
        inMap = new HashMap<>();
        preIndex = 0;
        
        for(int i = 0; i < inorder.length;i++){
            inMap.put(inorder[i], i);
        }
        
        return buildTreeHelper(preorder, 0, inorder.length - 1);
    }
    
    static Node buildTreeHelper(int[] preorder, int inStart, int inEnd){
        if(inStart > inEnd) return null;
        
        int rootVal = preorder[preIndex++];
        Node root = new Node(rootVal);
        
        if(inStart == inEnd) return root;
        
        int inIndex = inMap.get(rootVal);
        
        root.left = buildTreeHelper(preorder, inStart, inIndex - 1);
        root.right = buildTreeHelper(preorder, inIndex + 1, inEnd);
        
        return root;
    }
}
