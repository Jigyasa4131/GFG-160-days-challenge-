class Solution {
    public boolean isBridge(int V, int[][] edges, int c, int d) {
        // Step 1: Build adjacency list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }
        
        // Step 2: Remove edge (c,d) from adj list
        adj.get(c).remove(Integer.valueOf(d));
        adj.get(d).remove(Integer.valueOf(c));
        
        // Step 3: Check connectivity using DFS
        boolean[] visited = new boolean[V];
        dfs(c, adj, visited);
        
        // Step 4: If d is not visited â†’ edge is bridge
        return !visited[d];
    }
    
    private void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited) {
        visited[node] = true;
        for (int nei : adj.get(node)) {
            if (!visited[nei]) dfs(nei, adj, visited);
        }
    }
}
