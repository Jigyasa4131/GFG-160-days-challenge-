class Solution {
    static class Job {
        int deadline, profit;
        Job(int deadline, int profit) {
            this.deadline = deadline;
            this.profit = profit;
        }
    }

    public ArrayList<Integer> jobSequencing(int[] deadline, int[] profit) {
        int n = deadline.length;

        // Step 1: Store jobs in a list
        List<Job> jobs = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            jobs.add(new Job(deadline[i], profit[i]));
        }

        // Step 2: Sort jobs by profit (descending)
        jobs.sort((a, b) -> b.profit - a.profit);

        // Step 3: Find max deadline
        int maxDeadline = 0;
        for (Job job : jobs) {
            maxDeadline = Math.max(maxDeadline, job.deadline);
        }

        // Step 4: Time slots array
        int[] slots = new int[maxDeadline + 1]; // index 1-based
        Arrays.fill(slots, -1);

        int totalProfit = 0, jobCount = 0;

        // Step 5: Schedule jobs
        for (Job job : jobs) {
            for (int t = job.deadline; t > 0; t--) {
                if (slots[t] == -1) { // slot is free
                    slots[t] = job.profit;
                    totalProfit += job.profit;
                    jobCount++;
                    break;
                }
            }
        }

        // Step 6: Return results
        ArrayList<Integer> result = new ArrayList<>();
        result.add(jobCount);
        result.add(totalProfit);
        return result;
    }
}
