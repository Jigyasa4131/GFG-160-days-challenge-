class Trie {
    static class TrieNode {
        TrieNode[] children;
        boolean isEndOfWord;

        TrieNode() {
            children = new TrieNode[26]; // 'a' to 'z'
            isEndOfWord = false;
        }
    }

    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Insert a word
    public void insert(String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            int index = ch - 'a';
            if (node.children[index] == null) {
                node.children[index] = new TrieNode();
            }
            node = node.children[index];
        }
        node.isEndOfWord = true;
    }

    // Search exact word
    public boolean search(String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            int index = ch - 'a';
            if (node.children[index] == null) {
                return false;
            }
            node = node.children[index];
        }
        return node.isEndOfWord;
    }

    // Check prefix
    public boolean isPrefix(String prefix) {
        TrieNode node = root;
        for (char ch : prefix.toCharArray()) {
            int index = ch - 'a';
            if (node.children[index] == null) {
                return false;
            }
            node = node.children[index];
        }
        return true;
    }
}

class Solution {
    public List<Boolean> trieQueries(int[][] types, String[] words) {
        Trie trie = new Trie();
        List<Boolean> ans = new ArrayList<>();

        for (int i = 0; i < types.length; i++) {
            int type = types[i][0];
            String word = words[i];

            if (type == 1) {
                trie.insert(word);
            } else if (type == 2) {
                ans.add(trie.search(word));
            } else if (type == 3) {
                ans.add(trie.isPrefix(word));
            }
        }
        return ans;
    }

    // Driver for quick test
    public static void main(String[] args) {
        Solution sol = new Solution();

        // Example 1
        int[][] q1 = {{1}, {1}, {1}, {2}, {3}, {2}};
        String[] w1 = {"abcd", "abc", "bcd", "bc", "bc", "abc"};
        System.out.println(sol.trieQueries(q1, w1)); // [false, true, true]

        // Example 2
        int[][] q2 = {{1}, {1}, {3}, {3}, {2}};
        String[] w2 = {"gfg", "geeks", "fg", "geek", "for"};
        System.out.println(sol.trieQueries(q2, w2)); // [false, true, false]
    }
}
