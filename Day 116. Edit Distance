class Solution {
    public int editDistance(String s1, String s2) {
        // Code here
        int m = s1.length();
        int n = s2.length();
        
        // dp[i][j] = edit distance between s1[0...i-1] and s2[0...j-1]
        int[][] dp = new int[m + 1][n + 1];
        
        // Fill base cases
        for (int i = 0; i <= m; i++) dp[i][0] = i;  // delete all characters
        for (int j = 0; j <= n; j++) dp[0][j] = j;  // insert all characters
        
        // Fill the dp table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    // No operation needed
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    // Consider Insert, Delete, Replace
                    dp[i][j] = 1 + Math.min(
                        dp[i - 1][j],    // Delete
                        Math.min(
                            dp[i][j - 1],    // Insert
                            dp[i - 1][j - 1] // Replace
                        )
                    );
                }
            }
        }
        
        return dp[m][n];
    }
}
